// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mkv-util-server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MkvUtilClient is the client API for MkvUtil service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MkvUtilClient interface {
	GetFileSize(ctx context.Context, in *GetFileSizeRequest, opts ...grpc.CallOption) (*GetFileSizeReply, error)
	RunMkvToolNixCommand(ctx context.Context, in *RunMkvToolNixCommandRequest, opts ...grpc.CallOption) (*RunMkvToolNixCommandReply, error)
	Concat(ctx context.Context, in *ConcatRequest, opts ...grpc.CallOption) (*ConcatReply, error)
	GetChapters(ctx context.Context, in *GetChaptersRequest, opts ...grpc.CallOption) (*GetChaptersReply, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error)
	Split(ctx context.Context, in *SplitRequest, opts ...grpc.CallOption) (*SplitReply, error)
}

type mkvUtilClient struct {
	cc grpc.ClientConnInterface
}

func NewMkvUtilClient(cc grpc.ClientConnInterface) MkvUtilClient {
	return &mkvUtilClient{cc}
}

func (c *mkvUtilClient) GetFileSize(ctx context.Context, in *GetFileSizeRequest, opts ...grpc.CallOption) (*GetFileSizeReply, error) {
	out := new(GetFileSizeReply)
	err := c.cc.Invoke(ctx, "/MkvUtil/GetFileSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkvUtilClient) RunMkvToolNixCommand(ctx context.Context, in *RunMkvToolNixCommandRequest, opts ...grpc.CallOption) (*RunMkvToolNixCommandReply, error) {
	out := new(RunMkvToolNixCommandReply)
	err := c.cc.Invoke(ctx, "/MkvUtil/RunMkvToolNixCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkvUtilClient) Concat(ctx context.Context, in *ConcatRequest, opts ...grpc.CallOption) (*ConcatReply, error) {
	out := new(ConcatReply)
	err := c.cc.Invoke(ctx, "/MkvUtil/Concat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkvUtilClient) GetChapters(ctx context.Context, in *GetChaptersRequest, opts ...grpc.CallOption) (*GetChaptersReply, error) {
	out := new(GetChaptersReply)
	err := c.cc.Invoke(ctx, "/MkvUtil/GetChapters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkvUtilClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error) {
	out := new(GetInfoReply)
	err := c.cc.Invoke(ctx, "/MkvUtil/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkvUtilClient) Split(ctx context.Context, in *SplitRequest, opts ...grpc.CallOption) (*SplitReply, error) {
	out := new(SplitReply)
	err := c.cc.Invoke(ctx, "/MkvUtil/Split", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MkvUtilServer is the server API for MkvUtil service.
// All implementations must embed UnimplementedMkvUtilServer
// for forward compatibility
type MkvUtilServer interface {
	GetFileSize(context.Context, *GetFileSizeRequest) (*GetFileSizeReply, error)
	RunMkvToolNixCommand(context.Context, *RunMkvToolNixCommandRequest) (*RunMkvToolNixCommandReply, error)
	Concat(context.Context, *ConcatRequest) (*ConcatReply, error)
	GetChapters(context.Context, *GetChaptersRequest) (*GetChaptersReply, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoReply, error)
	Split(context.Context, *SplitRequest) (*SplitReply, error)
	mustEmbedUnimplementedMkvUtilServer()
}

// UnimplementedMkvUtilServer must be embedded to have forward compatible implementations.
type UnimplementedMkvUtilServer struct {
}

func (UnimplementedMkvUtilServer) GetFileSize(context.Context, *GetFileSizeRequest) (*GetFileSizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileSize not implemented")
}
func (UnimplementedMkvUtilServer) RunMkvToolNixCommand(context.Context, *RunMkvToolNixCommandRequest) (*RunMkvToolNixCommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMkvToolNixCommand not implemented")
}
func (UnimplementedMkvUtilServer) Concat(context.Context, *ConcatRequest) (*ConcatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concat not implemented")
}
func (UnimplementedMkvUtilServer) GetChapters(context.Context, *GetChaptersRequest) (*GetChaptersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChapters not implemented")
}
func (UnimplementedMkvUtilServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedMkvUtilServer) Split(context.Context, *SplitRequest) (*SplitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Split not implemented")
}
func (UnimplementedMkvUtilServer) mustEmbedUnimplementedMkvUtilServer() {}

// UnsafeMkvUtilServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MkvUtilServer will
// result in compilation errors.
type UnsafeMkvUtilServer interface {
	mustEmbedUnimplementedMkvUtilServer()
}

func RegisterMkvUtilServer(s grpc.ServiceRegistrar, srv MkvUtilServer) {
	s.RegisterService(&MkvUtil_ServiceDesc, srv)
}

func _MkvUtil_GetFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkvUtilServer).GetFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MkvUtil/GetFileSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkvUtilServer).GetFileSize(ctx, req.(*GetFileSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkvUtil_RunMkvToolNixCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMkvToolNixCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkvUtilServer).RunMkvToolNixCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MkvUtil/RunMkvToolNixCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkvUtilServer).RunMkvToolNixCommand(ctx, req.(*RunMkvToolNixCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkvUtil_Concat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkvUtilServer).Concat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MkvUtil/Concat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkvUtilServer).Concat(ctx, req.(*ConcatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkvUtil_GetChapters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChaptersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkvUtilServer).GetChapters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MkvUtil/GetChapters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkvUtilServer).GetChapters(ctx, req.(*GetChaptersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkvUtil_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkvUtilServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MkvUtil/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkvUtilServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkvUtil_Split_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkvUtilServer).Split(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MkvUtil/Split",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkvUtilServer).Split(ctx, req.(*SplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MkvUtil_ServiceDesc is the grpc.ServiceDesc for MkvUtil service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MkvUtil_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MkvUtil",
	HandlerType: (*MkvUtilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileSize",
			Handler:    _MkvUtil_GetFileSize_Handler,
		},
		{
			MethodName: "RunMkvToolNixCommand",
			Handler:    _MkvUtil_RunMkvToolNixCommand_Handler,
		},
		{
			MethodName: "Concat",
			Handler:    _MkvUtil_Concat_Handler,
		},
		{
			MethodName: "GetChapters",
			Handler:    _MkvUtil_GetChapters_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _MkvUtil_GetInfo_Handler,
		},
		{
			MethodName: "Split",
			Handler:    _MkvUtil_Split_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mkv-util-server.proto",
}
