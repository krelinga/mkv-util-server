// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: mkv-util-server.proto

package pb

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChaptersFormat int32

const (
	ChaptersFormat_CF_UNKNOWN ChaptersFormat = 0
	ChaptersFormat_CF_SIMPLE  ChaptersFormat = 1
	ChaptersFormat_CF_XML     ChaptersFormat = 2
)

// Enum value maps for ChaptersFormat.
var (
	ChaptersFormat_name = map[int32]string{
		0: "CF_UNKNOWN",
		1: "CF_SIMPLE",
		2: "CF_XML",
	}
	ChaptersFormat_value = map[string]int32{
		"CF_UNKNOWN": 0,
		"CF_SIMPLE":  1,
		"CF_XML":     2,
	}
)

func (x ChaptersFormat) Enum() *ChaptersFormat {
	p := new(ChaptersFormat)
	*p = x
	return p
}

func (x ChaptersFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChaptersFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_mkv_util_server_proto_enumTypes[0].Descriptor()
}

func (ChaptersFormat) Type() protoreflect.EnumType {
	return &file_mkv_util_server_proto_enumTypes[0]
}

func (x ChaptersFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChaptersFormat.Descriptor instead.
func (ChaptersFormat) EnumDescriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{0}
}

type RunMkvToolNixCommandRequest_Command int32

const (
	RunMkvToolNixCommandRequest_COMMAND_UNKNOWN RunMkvToolNixCommandRequest_Command = 0
	RunMkvToolNixCommandRequest_COMMAND_MKVINFO RunMkvToolNixCommandRequest_Command = 1
)

// Enum value maps for RunMkvToolNixCommandRequest_Command.
var (
	RunMkvToolNixCommandRequest_Command_name = map[int32]string{
		0: "COMMAND_UNKNOWN",
		1: "COMMAND_MKVINFO",
	}
	RunMkvToolNixCommandRequest_Command_value = map[string]int32{
		"COMMAND_UNKNOWN": 0,
		"COMMAND_MKVINFO": 1,
	}
)

func (x RunMkvToolNixCommandRequest_Command) Enum() *RunMkvToolNixCommandRequest_Command {
	p := new(RunMkvToolNixCommandRequest_Command)
	*p = x
	return p
}

func (x RunMkvToolNixCommandRequest_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunMkvToolNixCommandRequest_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_mkv_util_server_proto_enumTypes[1].Descriptor()
}

func (RunMkvToolNixCommandRequest_Command) Type() protoreflect.EnumType {
	return &file_mkv_util_server_proto_enumTypes[1]
}

func (x RunMkvToolNixCommandRequest_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunMkvToolNixCommandRequest_Command.Descriptor instead.
func (RunMkvToolNixCommandRequest_Command) EnumDescriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{2, 0}
}

type GetFileSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetFileSizeRequest) Reset() {
	*x = GetFileSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileSizeRequest) ProtoMessage() {}

func (x *GetFileSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileSizeRequest.ProtoReflect.Descriptor instead.
func (*GetFileSizeRequest) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{0}
}

func (x *GetFileSizeRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetFileSizeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetFileSizeReply) Reset() {
	*x = GetFileSizeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileSizeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileSizeReply) ProtoMessage() {}

func (x *GetFileSizeReply) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileSizeReply.ProtoReflect.Descriptor instead.
func (*GetFileSizeReply) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{1}
}

func (x *GetFileSizeReply) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type RunMkvToolNixCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command RunMkvToolNixCommandRequest_Command `protobuf:"varint,1,opt,name=command,proto3,enum=RunMkvToolNixCommandRequest_Command" json:"command,omitempty"`
	Args    []string                            `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *RunMkvToolNixCommandRequest) Reset() {
	*x = RunMkvToolNixCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunMkvToolNixCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMkvToolNixCommandRequest) ProtoMessage() {}

func (x *RunMkvToolNixCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMkvToolNixCommandRequest.ProtoReflect.Descriptor instead.
func (*RunMkvToolNixCommandRequest) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{2}
}

func (x *RunMkvToolNixCommandRequest) GetCommand() RunMkvToolNixCommandRequest_Command {
	if x != nil {
		return x.Command
	}
	return RunMkvToolNixCommandRequest_COMMAND_UNKNOWN
}

func (x *RunMkvToolNixCommandRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type RunMkvToolNixCommandReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode int32  `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Stdout   string `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr   string `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *RunMkvToolNixCommandReply) Reset() {
	*x = RunMkvToolNixCommandReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunMkvToolNixCommandReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMkvToolNixCommandReply) ProtoMessage() {}

func (x *RunMkvToolNixCommandReply) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMkvToolNixCommandReply.ProtoReflect.Descriptor instead.
func (*RunMkvToolNixCommandReply) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{3}
}

func (x *RunMkvToolNixCommandReply) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *RunMkvToolNixCommandReply) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *RunMkvToolNixCommandReply) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type ConcatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputPaths []string `protobuf:"bytes,1,rep,name=input_paths,json=inputPaths,proto3" json:"input_paths,omitempty"`
	OutputPath string   `protobuf:"bytes,2,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
}

func (x *ConcatRequest) Reset() {
	*x = ConcatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatRequest) ProtoMessage() {}

func (x *ConcatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatRequest.ProtoReflect.Descriptor instead.
func (*ConcatRequest) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{4}
}

func (x *ConcatRequest) GetInputPaths() []string {
	if x != nil {
		return x.InputPaths
	}
	return nil
}

func (x *ConcatRequest) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

type ConcatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConcatReply) Reset() {
	*x = ConcatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatReply) ProtoMessage() {}

func (x *ConcatReply) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatReply.ProtoReflect.Descriptor instead.
func (*ConcatReply) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{5}
}

type GetChaptersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPath string         `protobuf:"bytes,1,opt,name=in_path,json=inPath,proto3" json:"in_path,omitempty"`
	Format ChaptersFormat `protobuf:"varint,2,opt,name=format,proto3,enum=ChaptersFormat" json:"format,omitempty"`
}

func (x *GetChaptersRequest) Reset() {
	*x = GetChaptersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChaptersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChaptersRequest) ProtoMessage() {}

func (x *GetChaptersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChaptersRequest.ProtoReflect.Descriptor instead.
func (*GetChaptersRequest) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{6}
}

func (x *GetChaptersRequest) GetInPath() string {
	if x != nil {
		return x.InPath
	}
	return ""
}

func (x *GetChaptersRequest) GetFormat() ChaptersFormat {
	if x != nil {
		return x.Format
	}
	return ChaptersFormat_CF_UNKNOWN
}

type GetChaptersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapters *Chapters `protobuf:"bytes,1,opt,name=chapters,proto3" json:"chapters,omitempty"`
}

func (x *GetChaptersReply) Reset() {
	*x = GetChaptersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChaptersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChaptersReply) ProtoMessage() {}

func (x *GetChaptersReply) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChaptersReply.ProtoReflect.Descriptor instead.
func (*GetChaptersReply) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{7}
}

func (x *GetChaptersReply) GetChapters() *Chapters {
	if x != nil {
		return x.Chapters
	}
	return nil
}

type Chapters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format ChaptersFormat  `protobuf:"varint,1,opt,name=format,proto3,enum=ChaptersFormat" json:"format,omitempty"`
	Simple *SimpleChapters `protobuf:"bytes,2,opt,name=simple,proto3" json:"simple,omitempty"`
}

func (x *Chapters) Reset() {
	*x = Chapters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chapters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapters) ProtoMessage() {}

func (x *Chapters) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapters.ProtoReflect.Descriptor instead.
func (*Chapters) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{8}
}

func (x *Chapters) GetFormat() ChaptersFormat {
	if x != nil {
		return x.Format
	}
	return ChaptersFormat_CF_UNKNOWN
}

func (x *Chapters) GetSimple() *SimpleChapters {
	if x != nil {
		return x.Simple
	}
	return nil
}

type SimpleChapters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapters []*SimpleChapters_Chapter `protobuf:"bytes,1,rep,name=chapters,proto3" json:"chapters,omitempty"`
}

func (x *SimpleChapters) Reset() {
	*x = SimpleChapters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleChapters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleChapters) ProtoMessage() {}

func (x *SimpleChapters) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleChapters.ProtoReflect.Descriptor instead.
func (*SimpleChapters) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{9}
}

func (x *SimpleChapters) GetChapters() []*SimpleChapters_Chapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPath string `protobuf:"bytes,1,opt,name=in_path,json=inPath,proto3" json:"in_path,omitempty"`
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{10}
}

func (x *GetInfoRequest) GetInPath() string {
	if x != nil {
		return x.InPath
	}
	return ""
}

type GetInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Info `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetInfoReply) Reset() {
	*x = GetInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoReply) ProtoMessage() {}

func (x *GetInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoReply.ProtoReflect.Descriptor instead.
func (*GetInfoReply) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{11}
}

func (x *GetInfoReply) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *duration.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{12}
}

func (x *Info) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type SplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPath     string                     `protobuf:"bytes,1,opt,name=in_path,json=inPath,proto3" json:"in_path,omitempty"`
	ByChapters []*SplitRequest_ByChapters `protobuf:"bytes,2,rep,name=by_chapters,json=byChapters,proto3" json:"by_chapters,omitempty"`
}

func (x *SplitRequest) Reset() {
	*x = SplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitRequest) ProtoMessage() {}

func (x *SplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitRequest.ProtoReflect.Descriptor instead.
func (*SplitRequest) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{13}
}

func (x *SplitRequest) GetInPath() string {
	if x != nil {
		return x.InPath
	}
	return ""
}

func (x *SplitRequest) GetByChapters() []*SplitRequest_ByChapters {
	if x != nil {
		return x.ByChapters
	}
	return nil
}

type SplitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SplitReply) Reset() {
	*x = SplitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitReply) ProtoMessage() {}

func (x *SplitReply) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitReply.ProtoReflect.Descriptor instead.
func (*SplitReply) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{14}
}

type SimpleChapters_Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32              `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Name   string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Offset *duration.Duration `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SimpleChapters_Chapter) Reset() {
	*x = SimpleChapters_Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleChapters_Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleChapters_Chapter) ProtoMessage() {}

func (x *SimpleChapters_Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleChapters_Chapter.ProtoReflect.Descriptor instead.
func (*SimpleChapters_Chapter) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SimpleChapters_Chapter) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SimpleChapters_Chapter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleChapters_Chapter) GetOffset() *duration.Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

type SplitRequest_ByChapters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If not specified, will split from the beginning of the file.
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// If not specified, will split until the end of the file.
	Limit   int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	OutPath string `protobuf:"bytes,3,opt,name=out_path,json=outPath,proto3" json:"out_path,omitempty"`
}

func (x *SplitRequest_ByChapters) Reset() {
	*x = SplitRequest_ByChapters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkv_util_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitRequest_ByChapters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitRequest_ByChapters) ProtoMessage() {}

func (x *SplitRequest_ByChapters) ProtoReflect() protoreflect.Message {
	mi := &file_mkv_util_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitRequest_ByChapters.ProtoReflect.Descriptor instead.
func (*SplitRequest_ByChapters) Descriptor() ([]byte, []int) {
	return file_mkv_util_server_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SplitRequest_ByChapters) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SplitRequest_ByChapters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SplitRequest_ByChapters) GetOutPath() string {
	if x != nil {
		return x.OutPath
	}
	return ""
}

var File_mkv_util_server_proto protoreflect.FileDescriptor

var file_mkv_util_server_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x6b, 0x76, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1b, 0x52, 0x75,
	0x6e, 0x4d, 0x6b, 0x76, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x69, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x52, 0x75, 0x6e,
	0x4d, 0x6b, 0x76, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x69, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x33, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x4b, 0x56, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x01, 0x22, 0x68, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x4d, 0x6b, 0x76, 0x54, 0x6f, 0x6f, 0x6c,
	0x4e, 0x69, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0x51, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x56,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x39, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x5c, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x22,
	0xaf, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x68, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x29, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x39, 0x0a, 0x0b, 0x62, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x0a, 0x62, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x53, 0x0a, 0x0a, 0x42,
	0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x0c, 0x0a, 0x0a, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0x3b,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x46, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x46, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x46, 0x5f, 0x58, 0x4d, 0x4c, 0x10, 0x02, 0x32, 0xcd, 0x02, 0x0a, 0x07,
	0x4d, 0x6b, 0x76, 0x55, 0x74, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x4d, 0x6b, 0x76, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x69,
	0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x52, 0x75, 0x6e, 0x4d, 0x6b,
	0x76, 0x54, 0x6f, 0x6f, 0x6c, 0x4e, 0x69, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x52, 0x75, 0x6e, 0x4d, 0x6b, 0x76, 0x54,
	0x6f, 0x6f, 0x6c, 0x4e, 0x69, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x12, 0x0e,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x13, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x0d, 0x2e,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x72, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x61, 0x2f, 0x6d, 0x6b, 0x76, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mkv_util_server_proto_rawDescOnce sync.Once
	file_mkv_util_server_proto_rawDescData = file_mkv_util_server_proto_rawDesc
)

func file_mkv_util_server_proto_rawDescGZIP() []byte {
	file_mkv_util_server_proto_rawDescOnce.Do(func() {
		file_mkv_util_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_mkv_util_server_proto_rawDescData)
	})
	return file_mkv_util_server_proto_rawDescData
}

var file_mkv_util_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mkv_util_server_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_mkv_util_server_proto_goTypes = []interface{}{
	(ChaptersFormat)(0),                      // 0: ChaptersFormat
	(RunMkvToolNixCommandRequest_Command)(0), // 1: RunMkvToolNixCommandRequest.Command
	(*GetFileSizeRequest)(nil),               // 2: GetFileSizeRequest
	(*GetFileSizeReply)(nil),                 // 3: GetFileSizeReply
	(*RunMkvToolNixCommandRequest)(nil),      // 4: RunMkvToolNixCommandRequest
	(*RunMkvToolNixCommandReply)(nil),        // 5: RunMkvToolNixCommandReply
	(*ConcatRequest)(nil),                    // 6: ConcatRequest
	(*ConcatReply)(nil),                      // 7: ConcatReply
	(*GetChaptersRequest)(nil),               // 8: GetChaptersRequest
	(*GetChaptersReply)(nil),                 // 9: GetChaptersReply
	(*Chapters)(nil),                         // 10: Chapters
	(*SimpleChapters)(nil),                   // 11: SimpleChapters
	(*GetInfoRequest)(nil),                   // 12: GetInfoRequest
	(*GetInfoReply)(nil),                     // 13: GetInfoReply
	(*Info)(nil),                             // 14: Info
	(*SplitRequest)(nil),                     // 15: SplitRequest
	(*SplitReply)(nil),                       // 16: SplitReply
	(*SimpleChapters_Chapter)(nil),           // 17: SimpleChapters.Chapter
	(*SplitRequest_ByChapters)(nil),          // 18: SplitRequest.ByChapters
	(*duration.Duration)(nil),                // 19: google.protobuf.Duration
}
var file_mkv_util_server_proto_depIdxs = []int32{
	1,  // 0: RunMkvToolNixCommandRequest.command:type_name -> RunMkvToolNixCommandRequest.Command
	0,  // 1: GetChaptersRequest.format:type_name -> ChaptersFormat
	10, // 2: GetChaptersReply.chapters:type_name -> Chapters
	0,  // 3: Chapters.format:type_name -> ChaptersFormat
	11, // 4: Chapters.simple:type_name -> SimpleChapters
	17, // 5: SimpleChapters.chapters:type_name -> SimpleChapters.Chapter
	14, // 6: GetInfoReply.info:type_name -> Info
	19, // 7: Info.duration:type_name -> google.protobuf.Duration
	18, // 8: SplitRequest.by_chapters:type_name -> SplitRequest.ByChapters
	19, // 9: SimpleChapters.Chapter.offset:type_name -> google.protobuf.Duration
	2,  // 10: MkvUtil.GetFileSize:input_type -> GetFileSizeRequest
	4,  // 11: MkvUtil.RunMkvToolNixCommand:input_type -> RunMkvToolNixCommandRequest
	6,  // 12: MkvUtil.Concat:input_type -> ConcatRequest
	8,  // 13: MkvUtil.GetChapters:input_type -> GetChaptersRequest
	12, // 14: MkvUtil.GetInfo:input_type -> GetInfoRequest
	15, // 15: MkvUtil.Split:input_type -> SplitRequest
	3,  // 16: MkvUtil.GetFileSize:output_type -> GetFileSizeReply
	5,  // 17: MkvUtil.RunMkvToolNixCommand:output_type -> RunMkvToolNixCommandReply
	7,  // 18: MkvUtil.Concat:output_type -> ConcatReply
	9,  // 19: MkvUtil.GetChapters:output_type -> GetChaptersReply
	13, // 20: MkvUtil.GetInfo:output_type -> GetInfoReply
	16, // 21: MkvUtil.Split:output_type -> SplitReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_mkv_util_server_proto_init() }
func file_mkv_util_server_proto_init() {
	if File_mkv_util_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mkv_util_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileSizeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunMkvToolNixCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunMkvToolNixCommandReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChaptersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChaptersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chapters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleChapters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleChapters_Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkv_util_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitRequest_ByChapters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mkv_util_server_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mkv_util_server_proto_goTypes,
		DependencyIndexes: file_mkv_util_server_proto_depIdxs,
		EnumInfos:         file_mkv_util_server_proto_enumTypes,
		MessageInfos:      file_mkv_util_server_proto_msgTypes,
	}.Build()
	File_mkv_util_server_proto = out.File
	file_mkv_util_server_proto_rawDesc = nil
	file_mkv_util_server_proto_goTypes = nil
	file_mkv_util_server_proto_depIdxs = nil
}
